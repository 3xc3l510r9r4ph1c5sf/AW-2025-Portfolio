---
// Services grid to replace awards section
const services = {
  topSection: [
    {
      title: 'Creative Direction',
      description: 'Strategic leadership across design, messaging, and brand storytelling.',
    },
    {
      title: 'Brand Identity Design',
      description: 'Logo design, typography systems, color palettes, and full identity guidelines.',
    },
    {
      title: 'Social Media Design & Strategy',
      description: 'Content creation + growth-focused visuals tailored for digital engagement.',
    },
    {
      title: 'UI/UX Design',
      description: 'Human-centered web and app design focused on conversion and clarity.',
    },
    {
      title: 'Webflow / No-Code Development',
      description: 'Custom, scalable websites built with clean, responsive design—no dev team needed.',
    },
  ],
  bottomSection: [
    {
      title: 'Motion Design & Animation',
      description: 'Short-form animations, animated branding, reels, and product explainers.',
    },
    {
      title: 'AI-Enhanced Visual Production',
      description: 'Creative exploration + rapid ideation using Stable Diffusion, RunwayML, and more.',
    },
    {
      title: 'Prototyping & Design Systems',
      description: 'Interactive Figma prototypes and scalable design libraries for agile teams.',
    },
    {
      title: 'Creative Consulting',
      description: 'Brand audits, campaign ideation, and design ops support for startups and studios.',
    },
    {
      title: 'Art Direction for Campaigns',
      description: 'Styling and concepting visual direction for marketing, product, or brand launches.',
    },
  ],
}
---

<section id="about" class="s-about" data-intersect>
  <div class="s__inner js-inner">
    <div class="s__block s__block--about">
      <h2 class="s__title">About</h2>

      <div class="s__content">
        <p>
          Hi, I'm a San Francisco–based multidisciplinary graphic designer with 8+ years of experience shaping brands, social campaigns, digital experiences, and motion narratives—now enhanced with AI.
        </p>

        <p>
          I fuse human-first design with cutting-edge tools like Stable Diffusion and RunwayML to deliver work that grabs attention and drives results. My approach balances strategic thinking with aesthetic excellence and emotional resonance.
        </p>

        <p>
          From distinct brand identities and scroll-stopping social content to sleek web interfaces and dynamic motion graphics, I create cohesive experiences that stand the test of time.
        </p>

        <p>
          My AI-enhanced workflow accelerates ideation and iteration while maintaining the human empathy that makes design truly connect. I'm dependable, collaborative, and detail-oriented—always delivering on time, on brief, and beyond expectations.
        </p>

        <p>
          Looking to launch a distinctive brand or breathe new life into your digital presence? Let's explore how design + AI can take your creative vision to new heights.
        </p>
      </div><!-- .s__content -->
    </div><!-- .s__block -->

    <div class="s__block s__block--services">
      <h2 class="s__title">Services</h2>

      <div class="s__services">
        <div class="s__services__section s__services__section--top">
          {
            services.topSection.map((service, index) => (
              <div class={`s__service s__service--${index + 1} js-service`}>
                <div class="s__service__inner">
                  <h3 class="s__service__title">{service.title}</h3>
                  <p class="s__service__description">{service.description}</p>
                </div>
                <div class="s__service__mask" />
              </div>
            ))
          }
        </div>

        <div class="s__services__section s__services__section--bottom">
          {
            services.bottomSection.map((service, index) => (
              <div class={`s__service s__service--${index + 6} js-service`}>
                <div class="s__service__inner">
                  <h3 class="s__service__title">{service.title}</h3>
                  <p class="s__service__description">{service.description}</p>
                </div>
                <div class="s__service__mask" />
              </div>
            ))
          }
        </div>
      </div><!-- .s__services -->
    </div><!-- .s__block -->
  </div><!-- .s__inner -->

  <svg class="s__grid js-grid">
    <path class="js-path" d=""></path>
  </svg>

  <canvas class="s__canvas js-canvas"></canvas>
</section>

<script>
  import Emitter from '../utils/Emitter'
  import Ticker from '../utils/Ticker'

  class Section {
    el: HTMLElement
    inner: HTMLElement
    svg: HTMLElement
    path: HTMLElement
    canvas: HTMLCanvasElement
    ctx: CanvasRenderingContext2D
    services: NodeListOf<HTMLElement>

    smileyImages: {
      main: HTMLImageElement
      contrasted: HTMLImageElement
    }

    bounding: {
      left: number
      top: number
      width: number
      height: number
      innerWidth: number
      innerHeight: number
      offsetY: number
    }

    scroll: {
      start: number
      end: number
      p: number
      sp: number
    }

    lines: any[]
    smileys: any[]

    isPaused: boolean
    isForced: boolean

    /**
     * Constructor
     */
    constructor() {
      // Elements
      this.el = document.querySelector('.s-about')
      this.inner = this.el.querySelector('.js-inner')
      this.svg = this.el.querySelector('.js-grid')
      this.path = this.el.querySelector('.js-path')
      ;(this.canvas = document.querySelector('.js-canvas')),
        (this.ctx = this.canvas.getContext('2d'))
      this.services = this.el.querySelectorAll('.js-service')

      // Properties
      this.lines = []
      this.smileys = []

      this.isPaused = true
      this.isForced = false

      // Init
      if (document.readyState === 'complete') {
        Ticker.nextTick(this.init, this)
      } else {
        Emitter.once('siteLoaded', this.init, this)
      }
    }

    /**
     * Init
     */
    init() {
      this.createSmiley()

      this.setSize()
      this.setScroll()

      this.bindEvents()

      if (this.el.classList.contains('is-in-view') && this.isPaused) {
        this.isPaused = false
        Emitter.on('tick', this.tick, this)
      }
    }

    /**
     * Bind events
     */
    bindEvents() {
      Emitter.on('resize', this.onResize, this)
      Emitter.on('scroll', this.onScroll, this)

      // Reveal on scroll
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add('is-revealed')
              observer.unobserve(entry.target)
            }
          })
        },
        {
          threshold: 0.5,
        }
      )

      this.services.forEach((service) => {
        observer.observe(service)

        const serviceInteraction = this.onServiceInteraction.bind(this, service)
        service.addEventListener('mouseenter', serviceInteraction, {
          passive: true,
        })
        service.addEventListener('touchstart', serviceInteraction, {
          passive: true,
        })
      })

      this.el.addEventListener('intersect', this.onIntersect.bind(this), {
        passive: true,
      })
    }

    /**
     * Resize handler
     */
    onResize(widthChanged, heightChanged) {
      if (widthChanged) {
        this.setSize()
        this.setScroll()

        this.isForced = true
      }
    }

    /**
     * Scroll handler
     */
    onScroll(scrollY) {
      const { scroll } = this

      const trigger = scrollY + window.safeHeight

      if (trigger < scroll.start) {
        scroll.p = 0
      } else if (trigger > scroll.end) {
        scroll.p = 1
      } else {
        scroll.p = (trigger - scroll.start) / (scroll.end - scroll.start)
      }
    }

    /**
     * Intersect handler
     */
    onIntersect(e) {
      this.isPaused = !e.detail.isIntersecting

      if (this.isPaused) {
        Emitter.off('tick', this.tick, this)
      } else {
        Emitter.on('tick', this.tick, this)
      }
    }

    /**
     * Service interaction handler
     */
    onServiceInteraction(service) {
      service.classList.add('is-active')

      this.throwSmileys(service)

      setTimeout(() => {
        service.classList.remove('is-active')
      }, 100)
    }

    /**
     * Create smiley
     */
    createSmiley() {
      const mainImg = new Image(100, 100)
      mainImg.src = '/images/asset-smiley--main.svg'

      const contrastedImg = new Image(100, 100)
      contrastedImg.src = '/images/asset-smiley--contrasted.svg'

      this.smileyImages = {
        main: mainImg,
        contrasted: contrastedImg,
      }
    }

    /**
     * Set size
     */
    setSize() {
      const { canvas, svg } = this

      const bounding = this.el.getBoundingClientRect()

      this.bounding = {
        left: bounding.left,
        top: bounding.top,
        width: this.el.clientWidth,
        height: this.el.clientHeight,
        innerWidth: this.inner.clientWidth,
        innerHeight: this.inner.clientHeight,
        offsetY: 0,
      }

      svg.style.width = `${this.bounding.width}px`
      svg.style.height = `${this.bounding.height}px`

      canvas.width = this.bounding.width
      canvas.height = this.bounding.height
    }

    /**
     * Set scroll
     */
    setScroll() {
      const { bounding } = this

      this.scroll = {
        start: bounding.top + window.scrollY,
        end:
          bounding.top + window.scrollY + bounding.height + window.safeHeight,
        p: 0,
        sp: 0,
      }

      this.onScroll(window.scrollY)
      this.scroll.sp = this.scroll.p
    }

    /**
     * Set lines
     */
    setLines() {
      const { bounding } = this

      this.lines = []

      // Calculate gaps and inner position
      const innerX = (bounding.width - bounding.innerWidth) / 2
      const innerY =
        (bounding.height - bounding.innerHeight) / 2 + bounding.offsetY

      const vLines = window.safeWidth > 767 ? 12 : 8
      const hLines = 4

      const outerGapX = bounding.width / vLines
      const outerGapY = bounding.height / vLines
      const innerGapX = bounding.innerWidth / vLines
      const innerGapY = bounding.innerHeight / vLines
      const hGap = 1 / hLines

      // Corner lines
      const outer = {
        x1: 0,
        x2: bounding.width,
        y1: 0,
        y2: bounding.height,
      }
      const inner = {
        x1: innerX,
        x2: innerX + bounding.innerWidth,
        y1: innerY,
        y2: innerY + bounding.innerHeight,
      }
      const corners = []

      // Top left
      corners.push([
        { x: outer.x1, y: outer.y1 },
        { x: inner.x1, y: inner.y1 },
      ])

      // Top right
      corners.push([
        { x: outer.x2, y: outer.y1 },
        { x: inner.x2, y: inner.y1 },
      ])

      // Bottom right
      corners.push([
        { x: outer.x2, y: outer.y2 },
        { x: inner.x2, y: inner.y2 },
      ])

      // Bottom left
      corners.push([
        { x: outer.x1, y: outer.y2 },
        { x: inner.x1, y: inner.y2 },
      ])

      // Top & bottom lines, vertical
      for (let i = 1; i < vLines; i++) {
        this.lines.push([
          { x: outerGapX * i, y: outer.y1 },
          { x: innerX + innerGapX * i, y: inner.y1 },
        ])

        this.lines.push([
          { x: outerGapX * i, y: outer.y2 },
          { x: innerX + innerGapX * i, y: inner.y2 },
        ])
      }

      // Top lines, horizontal
      for (let i = 1; i < hLines; i++) {
        const index = 1 - Math.pow(1 - hGap * i, 2)

        const l1 = corners[0]
        const l2 = corners[1]

        // Get a point at i * hGap
        const p1 = {
          x: l1[0].x + (l1[1].x - l1[0].x) * index,
          y: l1[0].y + (l1[1].y - l1[0].y) * index,
        }

        const p2 = {
          x: l2[0].x + (l2[1].x - l2[0].x) * index,
          y: l2[0].y + (l2[1].y - l2[0].y) * index,
        }

        this.lines.push([p1, p2])
      }

      // Bottom lines, horizontal
      for (let i = 1; i < hLines; i++) {
        const index = 1 - Math.pow(1 - hGap * i, 2)

        const l1 = corners[3]
        const l2 = corners[2]

        // Get a point at i * hGap
        const p1 = {
          x: l1[0].x + (l1[1].x - l1[0].x) * index,
          y: l1[0].y + (l1[1].y - l1[0].y) * index,
        }

        const p2 = {
          x: l2[0].x + (l2[1].x - l2[0].x) * index,
          y: l2[0].y + (l2[1].y - l2[0].y) * index,
        }

        this.lines.push([p1, p2])
      }

      // Right & left lines, vertical
      for (let i = 0; i <= vLines; i++) {
        this.lines.push([
          { x: outer.x1, y: outerGapY * i },
          { x: inner.x1, y: innerY + innerGapY * i },
        ])

        this.lines.push([
          { x: outer.x2, y: outerGapY * i },
          { x: inner.x2, y: innerY + innerGapY * i },
        ])
      }

      // Right lines, horizontal
      for (let i = 1; i < hLines; i++) {
        const index = 1 - Math.pow(1 - hGap * i, 2)

        const l1 = corners[1]
        const l2 = corners[2]

        // Get a point at i * hGap
        const p1 = {
          x: l1[0].x + (l1[1].x - l1[0].x) * index,
          y: l1[0].y + (l1[1].y - l1[0].y) * index,
        }

        const p2 = {
          x: l2[0].x + (l2[1].x - l2[0].x) * index,
          y: l2[0].y + (l2[1].y - l2[0].y) * index,
        }

        this.lines.push([p1, p2])
      }

      // Left lines, horizontal
      for (let i = 1; i < hLines; i++) {
        const index = 1 - Math.pow(1 - hGap * i, 2)

        const l1 = corners[0]
        const l2 = corners[3]

        // Get a point at i * hGap
        const p1 = {
          x: l1[0].x + (l1[1].x - l1[0].x) * index,
          y: l1[0].y + (l1[1].y - l1[0].y) * index,
        }

        const p2 = {
          x: l2[0].x + (l2[1].x - l2[0].x) * index,
          y: l2[0].y + (l2[1].y - l2[0].y) * index,
        }

        this.lines.push([p1, p2])
      }

      this.drawLines()
    }

    /**
     * Draw lines
     */
    drawLines() {
      let d = ''

      this.lines.forEach((points) => {
        let p1 = points[0]
        let p2 = points[1]

        d += 'M ' + p1.x + ' ' + p1.y + ' L ' + p2.x + ' ' + p2.y + ' '
      })

      this.path.setAttribute('d', d)
    }

    /**
     * Throw smileys
     */
    throwSmileys(service) {
      const { el, ctx, smileyImages, smileys } = this

      const image = document.documentElement.classList.contains(
        'theme-contrasted'
      )
        ? smileyImages.contrasted
        : smileyImages.main

      const elBounding = el.getBoundingClientRect()
      const serviceBounding = service.getBoundingClientRect()

      const x = serviceBounding.left + serviceBounding.width * 0.5 - elBounding.left
      const y = serviceBounding.top + serviceBounding.height * 0.5 - elBounding.top

      const maxSmileys = window.safeWidth > 767 ? 10 : 5
      for (let i = 0; i < maxSmileys; i++) {
        const smiley = new Smiley(ctx, image, x, y)

        smileys.push(smiley)
      }
    }

    /**
     * Move smileys
     */
    moveSmileys() {
      const { bounding, smileys } = this

      smileys.forEach((smiley) => {
        smiley.move()

        if (smiley.y > bounding.height) {
          smileys.splice(smileys.indexOf(smiley), 1)
        }
      })
    }

    /**
     * Draw canvas
     */
    drawCanvas() {
      const { bounding, ctx, smileys } = this

      ctx.fillStyle = 'red'

      ctx.clearRect(0, 0, bounding.width, bounding.height)

      smileys.forEach((smiley) => {
        smiley.draw()
      })
    }

    /**
     * Tick
     */
    tick() {
      const { bounding, el, scroll } = this

      // Smooth scroll
      scroll.sp += (scroll.p - scroll.sp) * 0.2
      const sd = Math.round((scroll.p - scroll.sp) * 1000) / 1000

      bounding.offsetY =
        (window.safeWidth > 767 ? 400 : 200) * (this.scroll.sp * 2 - 1)

      el.style.setProperty('--offset-y', `${this.bounding.offsetY}px`)

      // Lines
      if (sd !== 0 || this.isForced) {
        this.setLines()
        this.drawLines()
      }

      // Smileys
      if (this.smileys.length) {
        this.moveSmileys()
        this.drawCanvas()
      }

      this.isForced = false
    }
  }

  class Smiley {
    ctx: CanvasRenderingContext2D
    image: HTMLImageElement

    width: number
    height: number
    x: number
    y: number
    r: number
    a: number
    va: number
    vx: number
    vy: number
    vr: number

    /**
     * Constructor
     */
    constructor(ctx, image, x, y) {
      // Elements
      this.ctx = ctx
      this.image = image

      // Properties
      this.width = 48
      this.height = 48
      this.x = x
      this.y = y
      this.r = 0
      this.a = 0.25 + Math.random() * 0.75
      this.vx = (Math.random() * 2 - 1) * 5
      this.vy = Math.random() * -10 - 5
      this.vr = (Math.random() * 2 - 1) * 10
      this.va = Math.random() * 0.01
    }

    /**
     * Move smiley
     */
    move() {
      this.vy += 0.45

      this.x += this.vx
      this.y += this.vy
      this.r += this.vr
      this.a += this.va
    }

    /**
     * Draw smiley
     */
    draw() {
      const { ctx, image } = this

      ctx.save()

      ctx.translate(
        this.x + this.width * 0.5 * this.a,
        this.y + this.height * 0.5 * this.a
      )

      ctx.rotate((this.r * Math.PI) / 180)

      ctx.translate(
        -this.x - this.width * 0.5 * this.a,
        -this.y - this.height * 0.5 * this.a
      )

      ctx.drawImage(
        image,
        this.x,
        this.y,
        this.width * this.a,
        this.height * this.a
      )

      ctx.restore()
    }
  }

  new Section()
</script>

<style lang="scss">
  .s-about {
    --width: 39.25rem;

    position: relative;
    z-index: 3;

    padding: 15rem 0;

    overflow: hidden;

    @include mq(desktop-xs) {
      --width: 32rem;
    }

    @include mq(tablet-sm) {
      --width: 70vw;

      padding: 7.5rem 0;
    }

    @include mq(phone) {
      --width: 80vw;
    }

    .s__inner {
      position: relative;
      z-index: 2;

      margin: 0 auto;
      width: var(--width);

      border: 1px solid color(secondary);

      transform: translate3d(0, var(--offset-y), 0);

      will-change: transform;
    }

    .s__title {
      margin: 0;
      padding: 0 0 2px;

      background: color(secondary);

      color: color(primary);
      font: 700 12px / 24px font-family(fraktion);
      letter-spacing: 0.1em;
      text-align: center;
      text-transform: uppercase;
    }

    .s__content {
      padding: 4.5rem;

      font: 200 2rem / 1.5 font-family(editorial);

      @include mq(desktop-xs) {
        font-size: 1.5rem;
      }

      @include mq(phone) {
        padding: 15vw 10vw;
      }

      a {
        position: relative;
        display: inline-block;

        color: color(secondary);
        text-decoration: none;

        &:before,
        &:after {
          position: absolute;
          bottom: 0.2em;
          left: 0;

          display: block;
          width: 100%;
          height: 1px;

          background: currentcolor;

          content: '';
        }

        &:after {
          height: 2px;

          transform: scaleX(0);
          transform-origin: 100% 50%;

          transition: transform 0.4s ease(in-out-quint);
        }

        &:hover {
          &:after {
            transform: scaleX(1);
            transform-origin: 0 50%;
          }
        }
      }
    }

    .s__services {
      margin: 0;
      padding: 0;
      display: grid;
      grid-template-columns: 1fr;
      gap: 0;

      background: repeating-linear-gradient(
        -45deg,
        transparent,
        transparent 1px,
        map.get($theme-colors, 'default', 'secondary') 1.5px,
        map.get($theme-colors, 'default', 'secondary') 2.5px,
        transparent 3px,
        map.get($theme-colors, 'default', 'primary') 11px
      );

      list-style: none;
      overflow: hidden;

      @at-root :global(.theme-contrasted) & {
        background: repeating-linear-gradient(
          -45deg,
          transparent,
          transparent 1px,
          map.get($theme-colors, 'contrasted', 'secondary') 1.5px,
          map.get($theme-colors, 'contrasted', 'secondary') 2.5px,
          transparent 3px,
          map.get($theme-colors, 'contrasted', 'primary') 11px
        );
      }

      &__section {
        display: grid;
        grid-template-columns: 1fr;
        gap: 0;

        @include mq(tablet-sm) {
          grid-template-columns: 1fr;
        }
      }

      .s__service {
        position: relative;
        z-index: 2;

        margin: 0;
        padding: 1.5rem;

        background: color(primary);
        clip-path: inset(-1px);
        cursor: default;

        will-change: transform;

        @include mq(phone) {
          padding: 1rem;
        }

        &:before {
          position: absolute;
          top: -1px;
          right: 0;
          bottom: 0;
          left: -1px;

          border: 1px solid color(secondary);

          content: '';
        }

        &__inner {
          position: relative;

          display: block;
          width: 100%;
          height: 100%;

          translate: -50% 0;

          transition:
            translate 1s ease(out-quint),
            scale 1.5s ease(in-out-quint);

          will-change: translate, scale;
        }

        &__mask {
          position: absolute;
          top: -1px;
          right: -1px;
          bottom: -1px;
          left: -1px;

          background: color(secondary);
          clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);

          transition: clip-path 0.8s ease(in-out-quint);

          will-change: clip-path;

          &:before {
            position: absolute;
            top: 0;
            left: 0;

            display: block;
            width: 100%;
            height: 100%;

            background: color(primary);
            mask: url('/images/asset-star.svg') center / 1.5rem 1.5rem no-repeat;

            transition: transform 0.8s ease(in-cubic);
            will-change: transform;

            content: '';
          }
        }

        &__title {
          margin: 0 0 0.5rem 0;

          font: 700 1.25rem / 1.2 font-family(fraktion);
          text-transform: uppercase;
          letter-spacing: 0.05em;

          @include mq(phone) {
            font-size: 1.1rem;
          }
        }

        &__description {
          margin: 0;

          font: 200 1rem / 1.4 font-family(editorial);

          @include mq(phone) {
            font-size: 0.9rem;
          }
        }

        &.is-active {
          .s__service__inner {
            scale: 0.9;

            transition: scale 0.1s ease(out-quint);
          }
        }

        &.is-revealed {
          .s__service__inner {
            translate: 0 0;
          }

          .s__service__mask {
            clip-path: polygon(100% 0, 100% 0, 100% 100%, 100% 100%);

            &:before {
              transform: translate3d(50%, 0, 0);
            }
          }
        }
      }
    }

    .s__grid {
      position: absolute;
      top: 0;
      left: 0;
      z-index: 1;

      width: 100%;
      height: 100%;

      pointer-events: none;

      path {
        fill: none;
        stroke: color(secondary);
        stroke-width: 1px;
      }
    }

    .s__canvas {
      position: absolute;
      top: 0;
      left: 0;
      z-index: 3;

      width: 100%;
      height: 100%;

      pointer-events: none;
    }

    &.is-out-of-view {
      .s__inner {
        transform: none;
        will-change: none;
      }

      .s__grid,
      .s__canvas {
        display: none;
      }
    }
  }
</style>